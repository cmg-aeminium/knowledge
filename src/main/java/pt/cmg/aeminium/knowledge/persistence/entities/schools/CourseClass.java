/**
 * Copyright (c) 2020 Carlos Gonçalves (https://www.linkedin.com/in/carlosmogoncalves/)
 * Likely open-source, so copy at will, bugs will be yours as well.
 */
package pt.cmg.aeminium.knowledge.persistence.entities.schools;

import java.io.Serializable;
import java.util.List;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import org.eclipse.persistence.annotations.Cache;
import org.eclipse.persistence.annotations.CacheCoordinationType;
import org.eclipse.persistence.annotations.CacheType;
import org.eclipse.persistence.config.CacheIsolationType;

/**
 * @author Carlos Gonçalves
 */
@Entity
@Table(name = "courseclasses")
@Cache(type = CacheType.FULL, isolation = CacheIsolationType.SHARED, alwaysRefresh = true, coordinationType = CacheCoordinationType.SEND_NEW_OBJECTS_WITH_CHANGES)
@NamedQuery(name = CourseClass.QUERY_FIND_ALL, query = "SELECT c from CourseClass c")
public class CourseClass implements Serializable {

    /**
     * Auto-generated by IDE
     */
    private static final long serialVersionUID = -3314766654715003022L;

    public static final String QUERY_FIND_ALL = "CourseClass.findAll";

    @Id
    private Long id;

    @Column(name = "year", nullable = false)
    private Integer year;

    @Column(name = "semester")
    private Integer semester;

    @Column(name = "ects", nullable = false)
    private Integer ects;

    @Column(name = "isoptional", nullable = false)
    private boolean isOptional;

    @ManyToOne(fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "course", referencedColumnName = "id")
    private Course course;

    @Column(name = "name")
    private Long nameTextContentId;

    @Column(name = "description")
    private Long descriptionContentId;

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "courseClass")
    private List<CourseClassTopic> courseClassTopics;

    public CourseClass() {
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getYear() {
        return year;
    }

    public void setYear(Integer year) {
        this.year = year;
    }

    public Integer getSemester() {
        return semester;
    }

    public void setSemester(Integer semester) {
        this.semester = semester;
    }

    public Integer getEcts() {
        return ects;
    }

    public void setEcts(Integer ects) {
        this.ects = ects;
    }

    public boolean isOptional() {
        return isOptional;
    }

    public void setOptional(boolean isOptional) {
        this.isOptional = isOptional;
    }

    public Course getCourse() {
        return course;
    }

    public void setCourse(Course course) {
        this.course = course;
    }

    public List<CourseClassTopic> getCourseClassTopics() {
        return courseClassTopics;
    }

    public void setCourseClassTopics(List<CourseClassTopic> courseClassTopics) {
        this.courseClassTopics = courseClassTopics;
    }

    public Long getNameTextContentId() {
        return nameTextContentId;
    }

    public void setNameTextContentId(Long nameTextContentId) {
        this.nameTextContentId = nameTextContentId;
    }

    public Long getDescriptionContentId() {
        return descriptionContentId;
    }

    public void setDescriptionContentId(Long descriptionContentId) {
        this.descriptionContentId = descriptionContentId;
    }

}
