/**
 * Copyright (c) 2020 Carlos Gonçalves (https://www.linkedin.com/in/carlosmogoncalves/)
 * Likely open-source, so copy at will, bugs will be yours as well.
 */
package pt.cmg.aeminium.knowledge.persistence.entities.knowledgebodies;

import java.io.Serializable;
import java.util.Objects;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQuery;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import org.eclipse.persistence.annotations.Cache;
import org.eclipse.persistence.annotations.CacheCoordinationType;
import org.eclipse.persistence.annotations.CacheType;
import org.eclipse.persistence.config.CacheIsolationType;

/**
 * @author Carlos Gonçalves
 */
@Entity
@Table(name = "knowledgetopics")
@Cache(type = CacheType.FULL, isolation = CacheIsolationType.SHARED, alwaysRefresh = true, coordinationType = CacheCoordinationType.SEND_NEW_OBJECTS_WITH_CHANGES)
@NamedQuery(name = KnowledgeTopic.QUERY_FIND_ALL, query = "SELECT kt FROM KnowledgeTopic kt")
public class KnowledgeTopic implements Serializable {

    /**
     * Auto-generated by IDE
     */
    private static final long serialVersionUID = 6025578077962121721L;

    public static final String QUERY_FIND_ALL = "KnowledgeTopic.findAll";

    @Id
    @SequenceGenerator(
        sequenceName = "knowledgetopics_id_seq",
        allocationSize = 1,
        initialValue = 1,
        name = "KATOPICS_SEQUENCE")
    @GeneratedValue(
        strategy = GenerationType.SEQUENCE,
        generator = "KATOPICS_SEQUENCE")
    @Column(name = "id")
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "knowledgearea", referencedColumnName = "id")
    private KnowledgeArea knowledgeArea;

    @Column(name = "name")
    private Long nameTextContentId;

    @Column(name = "description")
    private Long descriptionContentId;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public KnowledgeArea getKnowledgeArea() {
        return knowledgeArea;
    }

    public void setKnowledgeArea(KnowledgeArea knowledgeArea) {
        this.knowledgeArea = knowledgeArea;
    }

    public Long getNameTextContentId() {
        return nameTextContentId;
    }

    public void setNameTextContentId(Long nameTextContentId) {
        this.nameTextContentId = nameTextContentId;
    }

    public Long getDescriptionContentId() {
        return descriptionContentId;
    }

    public void setDescriptionContentId(Long descriptionContentId) {
        this.descriptionContentId = descriptionContentId;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        KnowledgeTopic other = (KnowledgeTopic) obj;
        return Objects.equals(id, other.id);
    }

}
