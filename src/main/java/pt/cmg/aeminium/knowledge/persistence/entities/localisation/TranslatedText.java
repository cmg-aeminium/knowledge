/**
 * Copyright (c) 2024 Carlos Gon√ßalves (https://www.linkedin.com/in/carlosmogoncalves/)
 * Likely open-source, so copy at will, bugs will be yours as well.
 */
package pt.cmg.aeminium.knowledge.persistence.entities.localisation;

import java.io.Serializable;
import java.util.Objects;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Id;
import javax.persistence.NamedQuery;
import javax.persistence.Table;

@Entity
@Table(name = "translatedtexts")
@NamedQuery(name = TranslatedText.QUERY_FIND_IN_IDS, query = "SELECT t FROM TranslatedText t WHERE t.id IN :ids")
public class TranslatedText implements Serializable {

    /**
     * Auto-generated by IDE
     */
    private static final long serialVersionUID = -4273689659341357189L;

    public static final String QUERY_FIND_IN_IDS = "TranslatedText.findInIds";

    @Id
    private Long id;

    @Column
    @Enumerated(EnumType.STRING)
    private Language language;

    @Column
    private String textValue;

    public TranslatedText() {
    }

    public TranslatedText(Long id, Language language, String textValue) {
        super();
        this.id = id;
        this.language = language;
        this.textValue = textValue;
    }

    public TranslatedText(Language language, String textValue) {
        super();
        this.language = language;
        this.textValue = textValue;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Language getLanguage() {
        return language;
    }

    public void setLanguage(Language language) {
        this.language = language;
    }

    public String getTextValue() {
        return textValue;
    }

    public void setTextValue(String textValue) {
        this.textValue = textValue;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, language, textValue);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        TranslatedText other = (TranslatedText) obj;
        return Objects.equals(id, other.id) && language == other.language && Objects.equals(textValue, other.textValue);
    }

}
