/*
 * Copyright (c) 2024 Carlos Gonçalves (https://www.linkedin.com/in/carlosmogoncalves/)
 * Likely open-source, so copy at will, bugs will be yours as well.
 */
package pt.cmg.aeminium.knowledge.persistence.entities.knowledgebodies;

import java.io.Serializable;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Objects;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import org.eclipse.persistence.annotations.Cache;
import org.eclipse.persistence.annotations.CacheCoordinationType;
import org.eclipse.persistence.annotations.CacheType;
import org.eclipse.persistence.config.CacheIsolationType;
import pt.cmg.aeminium.knowledge.persistence.entities.identity.User;

/**
 * @author Carlos Gonçalves
 */
@Entity
@Table(name = "knowledgebodies")
@Cache(type = CacheType.FULL, isolation = CacheIsolationType.SHARED, alwaysRefresh = true, coordinationType = CacheCoordinationType.SEND_NEW_OBJECTS_WITH_CHANGES)
@NamedQuery(name = KnowledgeBody.QUERY_FIND_ALL, query = "SELECT kb from KnowledgeBody kb")
public class KnowledgeBody implements Serializable {

    /**
     * Auto-generated by IDE
     */
    private static final long serialVersionUID = -7392458088532717222L;

    public static final String QUERY_FIND_ALL = "KnowledgeBody.findAll";

    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "BOK_SEQUENCE")
    @SequenceGenerator(name = "BOK_SEQUENCE",
        sequenceName = "knowledgebodies_id_seq",
        initialValue = 1,
        allocationSize = 1)
    @Column(name = "id")
    private Long id;

    @Column(name = "year", nullable = false)
    private int year;

    @Column(name = "image", nullable = true)
    private String image;

    @Column(name = "name")
    private Long nameTextContentId;

    @Column(name = "description")
    private Long descriptionContentId;

    @OneToMany(cascade = CascadeType.ALL, mappedBy = "knowledgeBody", fetch = FetchType.LAZY)
    private List<KnowledgeArea> knowledgeAreas;

    @Column(name = "createdat")
    private LocalDateTime createdAt;

    @OneToOne(optional = false, fetch = FetchType.LAZY)
    @JoinColumn(name = "createdby", referencedColumnName = "id")
    private User createdBy;

    public KnowledgeBody() {
        this.createdAt = LocalDateTime.now();
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public int getYear() {
        return year;
    }

    public void setYear(int year) {
        this.year = year;
    }

    public String getImage() {
        return image;
    }

    public void setImage(String image) {
        this.image = image;
    }

    public Long getNameTextContentId() {
        return nameTextContentId;
    }

    public void setNameTextContentId(Long nameTextContentId) {
        this.nameTextContentId = nameTextContentId;
    }

    public Long getDescriptionContentId() {
        return descriptionContentId;
    }

    public void setDescriptionContentId(Long descriptionContentId) {
        this.descriptionContentId = descriptionContentId;
    }

    public List<KnowledgeArea> getKnowledgeAreas() {
        return knowledgeAreas;
    }

    public void setKnowledgeAreas(List<KnowledgeArea> knowledgeAreas) {
        this.knowledgeAreas = knowledgeAreas;
    }

    public void addKnowledgeArea(KnowledgeArea knowledgeArea) {
        this.knowledgeAreas.add(knowledgeArea);
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public User getCreatedBy() {
        return createdBy;
    }

    public void setCreatedBy(User createdBy) {
        this.createdBy = createdBy;
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (getClass() != obj.getClass()) {
            return false;
        }
        KnowledgeBody other = (KnowledgeBody) obj;
        return Objects.equals(id, other.id);
    }

}
